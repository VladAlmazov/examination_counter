{"version":3,"sources":["SettingsBlock/SettingsBlock.module.css","DisplayBlock/DisplayBlock.module.css","App.module.css","DisplayBlock/Display.tsx","DisplayBlock/Buttons.tsx","SettingsBlock/Button.tsx","SettingsBlock/SettingsBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","className","s","inputWrapper","value","maxValue","maxNumber","inputItem","Buttons","buttonWrapper","buttonItem","onClick","incrementValue","disabled","resetValue","disableResetButton","Button","disable","setToLocalStorage","SettingsBlock","useEffect","startValue","setResult","setDisableSettingsButton","setDisableResetButton","styles","commonWrapper","spanWrapper","span","type","min","error","input","onChange","e","setMaxValue","currentTarget","setStartValue","setDisableIncButton","App","useState","disableSettingsButton","disableIncButton","localStorage","getItem","newMaxValue","JSON","parse","newStartValue","setItem","stringify","appWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6864edec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanWrapper\":\"SettingsBlock_spanWrapper__HNthh\",\"input\":\"SettingsBlock_input__3Dx_E\",\"span\":\"SettingsBlock_span__3BeLw\",\"buttonWrapper\":\"SettingsBlock_buttonWrapper__lWyBy\",\"buttonItem\":\"SettingsBlock_buttonItem__2tvW7\",\"error\":\"SettingsBlock_error__F0RTv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"DisplayBlock_inputWrapper__2Akzh\",\"inputItem\":\"DisplayBlock_inputItem__3FaIv\",\"buttonWrapper\":\"DisplayBlock_buttonWrapper__2gB-5\",\"buttonItem\":\"DisplayBlock_buttonItem__1oztt\",\"maxNumber\":\"DisplayBlock_maxNumber__2WGhj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3WfU8\",\"commonWrapper\":\"App_commonWrapper__1Kt1c\"};","import React from 'react';\nimport s from './DisplayBlock.module.css';\n\nexport type InputPropsType = {\n    value: number | string\n    maxValue: number\n}\n\nexport function Display(props: InputPropsType) {\n    return (\n        <div className={s.inputWrapper}>\n            <input className={props.value === props.maxValue ? s.maxNumber : s.inputItem} value={props.value}/>\n        </div>\n    );\n}\n","import React, {MouseEvent} from 'react';\nimport s from './DisplayBlock.module.css';\nimport {DisplayValuesType} from '../App';\n\ntype ButtonsPropsType = {\n    incrementValue: (e: MouseEvent<HTMLButtonElement>) => void\n    resetValue: () => void\n    disabled: boolean\n    disableIncButton: boolean\n    disableResetButton: boolean\n    value: DisplayValuesType\n    maxValue: number\n    setDisableIncButton: (disable: boolean) => void\n    setDisableResetButton: (disable: boolean) => void\n}\n\nexport function Buttons(props: ButtonsPropsType) {\n\n    return (\n        <div className={s.buttonWrapper}>\n            <button className={s.buttonItem}\n                    onClick={props.incrementValue}\n                    disabled={ props.value >= props.maxValue || typeof props.value === 'string'}>\n                Inc\n            </button>\n            <button className={s.buttonItem}\n                    onClick={props.resetValue}\n                    disabled={props.disableResetButton}>\n                Reset\n            </button>\n\n        </div>\n    );\n}\n","import s from './SettingsBlock.module.css';\r\n\r\ntype ButtonPropsType = {\r\n    setToLocalStorage: () => void\r\n    disable: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return (\r\n        <div className={s.buttonWrapper}>\r\n            <button disabled={props.disable} className={s.buttonItem} onClick={props.setToLocalStorage} >Set</button>\r\n        </div>\r\n    )\r\n}","import s from './SettingsBlock.module.css'\r\nimport React, {ChangeEvent, useEffect} from 'react';\r\nimport {Button} from './Button';\r\nimport {DisplayValuesType} from '../App';\r\nimport styles from '../App.module.css'\r\n\r\ntype SettingsPropsType = {\r\n    setResult: (value: DisplayValuesType) => void\r\n    startValue: number\r\n    setStartValue: (number: number) => void\r\n    maxValue: number\r\n    setMaxValue: (number: number) => void\r\n    disable: boolean\r\n    setDisableSettingsButton: (disable: boolean) => void\r\n    setDisableIncButton: (disable: boolean) => void\r\n    setDisableResetButton: (disable: boolean) => void\r\n}\r\n\r\nexport const SettingsBlock = (props: SettingsPropsType) => {\r\n\r\n    useEffect(() => {\r\n        if (props.startValue === props.maxValue\r\n            || props.maxValue < props.startValue\r\n            || props.startValue < 0\r\n            || props.maxValue < 0) {\r\n            props.setResult('Incorrect value')\r\n            props.setDisableSettingsButton(true)\r\n            props.setDisableResetButton(true)\r\n        }\r\n    })\r\n\r\n    const setToDisplayHandler = () => {\r\n        props.setResult(props.startValue)\r\n        props.setDisableIncButton(false)\r\n        props.setDisableSettingsButton(true)\r\n    }\r\n\r\n    const maxValueOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (props.maxValue >= 0) {\r\n            props.setMaxValue(+e.currentTarget.value)\r\n            props.setResult(`Enter values and press 'set'`)\r\n            props.setDisableSettingsButton(false)\r\n            props.setDisableResetButton(true)\r\n        } else {\r\n            props.setMaxValue(+e.currentTarget.value)\r\n            props.setResult('Incorrect value')\r\n            props.setDisableSettingsButton(true)\r\n            props.setDisableResetButton(true)\r\n        }\r\n    }\r\n    const minValueOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (props.startValue >= -1) {\r\n            props.setStartValue(+e.currentTarget.value)\r\n            props.setResult(`Enter values and press 'set'`)\r\n            props.setDisableSettingsButton(false)\r\n            props.setDisableResetButton(true)\r\n        } else {\r\n            props.setStartValue(+e.currentTarget.value)\r\n            props.setResult('Incorrect value')\r\n            props.setDisableSettingsButton(true)\r\n            props.setDisableResetButton(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.commonWrapper}>\r\n            <div className={s.spanWrapper}>\r\n                <span className={s.span}> Max value:</span>\r\n\r\n                <input type=\"number\"\r\n                       min={-1}\r\n                       className={props.maxValue === -1 ? s.error : s.input}\r\n                       value={props.maxValue}\r\n                       onChange={maxValueOnChangeHandler}\r\n                />\r\n                <br/>\r\n                <span className={s.span}> Start value:</span>\r\n\r\n                <input type=\"number\"\r\n                       min={-1}\r\n                       className={props.startValue === -1 ? s.error : s.input}\r\n                       value={props.startValue}\r\n                       onChange={minValueOnChangeHandler}\r\n                />\r\n                <br/>\r\n            </div>\r\n            <Button setToLocalStorage={setToDisplayHandler} disable={props.disable}/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport s from './App.module.css';\nimport {Display} from './DisplayBlock/Display';\nimport {Buttons} from './DisplayBlock/Buttons';\nimport {SettingsBlock} from './SettingsBlock/SettingsBlock';\n\nexport type DisplayValuesType = number | string\n\nfunction App() {\n\n    const [startValue, setStartValue] = useState(0)\n    const [maxValue, setMaxValue] = useState(0)\n    const [disableSettingsButton, setDisableSettingsButton] = useState(false)\n    const [disableIncButton, setDisableIncButton] = useState(true)\n    const [disableResetButton, setDisableResetButton] = useState(true)\n    const [value, setResult] = useState<DisplayValuesType>(startValue)\n\n    useEffect(() => {\n        let maxValue = localStorage.getItem('maxValue') || 'defaultValue'\n        let startValue = localStorage.getItem('startValue') || 'defaultValue'\n        if (maxValue && startValue) {\n            let newMaxValue = JSON.parse(maxValue)\n            let newStartValue = JSON.parse(startValue)\n            setMaxValue(newMaxValue)\n            setStartValue(newStartValue)\n            setResult(newStartValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }, [maxValue, startValue])\n\n    const incrementValue = () => {\n        if (value !== maxValue && typeof value === 'number') {\n            setResult(value + 1)\n        }\n        setDisableResetButton(false)\n    }\n\n    const resetValue = () => {\n        setResult(startValue)\n        setDisableResetButton(true)\n    }\n\n    return (\n        <div className={s.appWrapper}>\n            <div>\n                <SettingsBlock setResult={setResult}\n                               disable={disableSettingsButton}\n                               setDisableSettingsButton={setDisableSettingsButton}\n                               setMaxValue={setMaxValue}\n                               setStartValue={setStartValue}\n                               startValue={startValue}\n                               maxValue={maxValue}\n                               setDisableIncButton={setDisableIncButton}\n                               setDisableResetButton={setDisableResetButton}\n                />\n            </div>\n            <div className={s.commonWrapper}>\n                <Display value={value} maxValue={maxValue}/>\n                <Buttons\n                    incrementValue={incrementValue}\n                    resetValue={resetValue}\n                    disabled={disableSettingsButton}\n                    disableIncButton={disableIncButton}\n                    disableResetButton={disableResetButton}\n                    setDisableIncButton={setDisableIncButton}\n                    setDisableResetButton={setDisableResetButton}\n                    value={value}\n                    maxValue={maxValue}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}